"""
Django settings for abm_logistics project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import datetime
import logging.config
from pathlib import Path

from django.utils.log import DEFAULT_LOGGING

# Build paths inside the abm_logistics like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vokx_a9if%4q-2tvkazpehkkh-%-qb0mv4r10^s=#!-n2(tqf3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # modules
    'rest_framework',
    'drf_yasg',
    'rest_framework_swagger',
    'corsheaders',
    'django_celery_beat',
    'django_celery_results',
    'fcm_django',
    'channels',

    # apps
    'apps.users',
    'apps.roles',
    'apps.choices',
    'apps.finances',
    'apps.company',


    'simple_history',
]

SITE_ID = 1
# SITE_NAME = os.environ.get('SITE_NAME', 'domain.com')
# SITE_PROTOCOL = 'https://'
# SITE_URL = SITE_PROTOCOL + SITE_NAME

ADMINS = (
    ('Artush Ghazaryan (Gmail)', 'artush.ghazaryan96@gmail.com'),
)
MANAGERS = ADMINS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'
ASGI_APPLICATION = 'project.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('localhost', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'db_name',
        'USER': 'db_password',
        'PASSWORD': '8H3neeafR3nvYvHeas9f9ggasAFAYf9g',
        'HOST': 'postgres',
        'PORT': '5432'
    }
}
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = ('snippets.auth.PhoneOrEmailModelBackend',)

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

gettext = lambda s: s
LANGUAGES = (
    ('hy', gettext('Armenian')),
    ('en', gettext('English')),
)
MODELTRANSLATION_LANGUAGES = ('hy', 'en')

TIME_ZONE = 'Asia/Yerevan'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'public', 'static')
STATICFILES_DIRS = (
    os.path.normpath(os.path.join(BASE_DIR, 'static')),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'public', 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django Rest Framework

REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.AllowAny',
    # ),
    'DEFAULT_PAGINATION_CLASS': 'snippets.filters.LimitOffsetPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 'DEFAULT_FILTER_BACKENDS': ['snippets.filters.ModelFilterBackend'],
}

# JWT

DEFAULTS = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=15),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=15),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),
}

# REST_USE_JWT = True

# Celery

# if USE_TZ:
CELERY_TIMEZONE = 'Asia/Yerevan'
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_TIME_LIMIT = 5 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# CELERY_CACHE_BACKEND = 'django-cache'
# CELERY_TASK_TRACK_STARTED = True

# Firebase
FCM_DJANGO_SETTINGS = {
    'FCM_SERVER_KEY': '[your api key]'
}

# swagger

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'JWT': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'access_token'
        }
    },
}

# LOGGING

# if not DEBUG:
#     LOGGING_ROOT = os.path.normpath(os.path.join(BASE_DIR, 'logs'))
#     LOGGING = {
#         "version": 1,
#         "disable_existing_loggers": False,
#         "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
#         "formatters": {
#             "verbose": {
#                 "format": " %(asctime)s %(levelname)s (%(pathname)s line:%(lineno)s %(module)s.%(funcName)s) "
#                           "%(process)d %(thread)d %(message)s"
#             }
#         },
#         "handlers": {
#             "file": {
#                 "level": "INFO",
#                 "class": "logging.handlers.RotatingFileHandler",
#                 "filename": LOGGING_ROOT + "/logs.log",
#                 'backupCount': 10,
#                 'maxBytes': 3145,
#                 # 'maxBytes': 314572800,
#                 "formatter": "verbose",
#             },
#             "mail_admins": {
#                 "level": "ERROR",
#                 "filters": ["require_debug_false"],
#                 "class": "django.utils.log.AdminEmailHandler",
#             },
#             "console": {
#                 "level": "DEBUG",
#                 "class": "logging.StreamHandler",
#                 "formatter": "verbose",
#             },
#         },
#         "root": {"level": "INFO", "handlers": ["console", 'file']},
#         "loggers": {
#             "django.request": {
#                 "handlers": ["mail_admins", "file"],
#                 "level": "ERROR",
#                 "propagate": True,
#             },
#             "django.security.DisallowedHost": {
#                 "level": "ERROR",
#                 "handlers": ["console", "mail_admins"],
#                 "propagate": True,
#             },
#         },
#     }
# LOGGING
# LOGGING_ROOT = os.path.normpath(os.path.join(BASE_DIR, 'logs'))
#
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "root": {"level": "INFO", "handlers": ["file"]},
#     "handlers": {
#         "file": {
#             "level": "INFO",
#             "class": "logging.FileHandler",
#             "filename": LOGGING_ROOT + "/logs.log",
#             "formatter": "app",
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["file"],
#             "level": "INFO",
#             "propagate": True
#         },
#     },
#     "formatters": {
#         "app": {
#             "format": (
#                 u"%(asctime)s [%(levelname)-8s] "
#                 "(%(module)s.%(funcName)s) %(message)s"
#             ),
#             "datefmt": "%Y-%m-%d %H:%M:%S",
#         },
#     },
# }

# CORS Headers

# If this is used then `CORS_ORIGIN_WHITELIST` will not have any effect
# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
# If this is used, then not need to use `CORS_ORIGIN_ALLOW_ALL = True`
CORS_ORIGIN_WHITELIST = [f'https://{x}' for x in ALLOWED_HOSTS] + \
                        ['http://localhost:3000', 'http://127.0.0.1:3000']

# CORS_ORIGIN_REGEX_WHITELIST = [
#     'http://localhost:3030',
# ]

try:
    from project.settings_local import *  # NOQA
except ImportError:
    pass

# Mail
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = '587'
EMAIL_HOST_USER = 'user@gmail.com'
EMAIL_HOST_PASSWORD = 'password'

SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
